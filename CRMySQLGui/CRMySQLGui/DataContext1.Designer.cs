//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 22/09/2014 14:10:02
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace CrmContext
{

    [DatabaseAttribute(Name = "crm")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class CrmDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(CrmDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCompany(Company instance);
        partial void UpdateCompany(Company instance);
        partial void DeleteCompany(Company instance);
        partial void InsertOrderdetail(Orderdetail instance);
        partial void UpdateOrderdetail(Orderdetail instance);
        partial void DeleteOrderdetail(Orderdetail instance);
        partial void InsertOrder(Order instance);
        partial void UpdateOrder(Order instance);
        partial void DeleteOrder(Order instance);
        partial void InsertPersoncontact(Personcontact instance);
        partial void UpdatePersoncontact(Personcontact instance);
        partial void DeletePersoncontact(Personcontact instance);
        partial void InsertProductcategory(Productcategory instance);
        partial void UpdateProductcategory(Productcategory instance);
        partial void DeleteProductcategory(Productcategory instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);

        #endregion

        public CrmDataContext() :
        base(GetConnectionString("CrmDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public CrmDataContext(MappingSource mappingSource) :
        base(GetConnectionString("CrmDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public CrmDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public CrmDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public CrmDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public CrmDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Company> Companies
        {
            get
            {
                return this.GetTable<Company>();
            }
        }

        public Devart.Data.Linq.Table<Orderdetail> Orderdetails
        {
            get
            {
                return this.GetTable<Orderdetail>();
            }
        }

        public Devart.Data.Linq.Table<Order> Orders
        {
            get
            {
                return this.GetTable<Order>();
            }
        }

        public Devart.Data.Linq.Table<Personcontact> Personcontacts
        {
            get
            {
                return this.GetTable<Personcontact>();
            }
        }

        public Devart.Data.Linq.Table<Productcategory> Productcategories
        {
            get
            {
                return this.GetTable<Productcategory>();
            }
        }

        public Devart.Data.Linq.Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }
    }
}

namespace CrmContext
{

    /// <summary>
    /// The table of customer and shipping companies
    /// </summary>
    [Table(Name = @"crm.company")]
    public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CompanyID;

        private string _CompanyName;

        private System.Nullable<int> _PrimaryContact;

        private string _Web;

        private string _Email;

        private string _AddressTitle;

        private string _Address;

        private string _City;

        private string _Region;

        private string _PostalCode;

        private string _Country;

        private string _Phone;

        private string _Fax;
        #pragma warning restore 0649

        private EntityRef<Personcontact> _Personcontact_PrimaryContact;

        private EntitySet<Order> _Orders_CompanyID;

        private EntitySet<Order> _Orders_ShipCompanyID;

        private EntitySet<Personcontact> _Personcontacts_CompanyID;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCompanyIDChanging(int value);
        partial void OnCompanyIDChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnPrimaryContactChanging(System.Nullable<int> value);
        partial void OnPrimaryContactChanged();
        partial void OnWebChanging(string value);
        partial void OnWebChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnAddressTitleChanging(string value);
        partial void OnAddressTitleChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        #endregion

        public Company()
        {
            this._Personcontact_PrimaryContact  = default(EntityRef<Personcontact>);
            this._Orders_CompanyID = new EntitySet<Order>(new Action<Order>(this.attach_Orders_CompanyID), new Action<Order>(this.detach_Orders_CompanyID));
            this._Orders_ShipCompanyID = new EntitySet<Order>(new Action<Order>(this.attach_Orders_ShipCompanyID), new Action<Order>(this.detach_Orders_ShipCompanyID));
            this._Personcontacts_CompanyID = new EntitySet<Personcontact>(new Action<Personcontact>(this.attach_Personcontacts_CompanyID), new Action<Personcontact>(this.detach_Personcontacts_CompanyID));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [Column(Storage = "_CompanyID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CompanyID
        {
            get
            {
                return this._CompanyID;
            }
            set
            {
                if (this._CompanyID != value)
                {
                    this.OnCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyID = value;
                    this.SendPropertyChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyName in the schema.
        /// </summary>
        [Column(Storage = "_CompanyName", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CompanyName
        {
            get
            {
                return this._CompanyName;
            }
            set
            {
                if (this._CompanyName != value)
                {
                    this.OnCompanyNameChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyName = value;
                    this.SendPropertyChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }

    
        /// <summary>
        /// A reference to the employee who is the preferable company contact
        /// </summary>
        [Column(Storage = "_PrimaryContact", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PrimaryContact
        {
            get
            {
                return this._PrimaryContact;
            }
            set
            {
                if (this._PrimaryContact != value)
                {
                    if (this._Personcontact_PrimaryContact.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPrimaryContactChanging(value);
                    this.SendPropertyChanging();
                    this._PrimaryContact = value;
                    this.SendPropertyChanged("PrimaryContact");
                    this.OnPrimaryContactChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Web in the schema.
        /// </summary>
        [Column(Storage = "_Web", DbType = "VARCHAR(100) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Web
        {
            get
            {
                return this._Web;
            }
            set
            {
                if (this._Web != value)
                {
                    this.OnWebChanging(value);
                    this.SendPropertyChanging();
                    this._Web = value;
                    this.SendPropertyChanged("Web");
                    this.OnWebChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Storage = "_Email", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// Specifies the address type, i.e., if it is legal, physical or other
        /// </summary>
        [Column(Storage = "_AddressTitle", DbType = "VARCHAR(120) NULL", UpdateCheck = UpdateCheck.Never)]
        public string AddressTitle
        {
            get
            {
                return this._AddressTitle;
            }
            set
            {
                if (this._AddressTitle != value)
                {
                    this.OnAddressTitleChanging(value);
                    this.SendPropertyChanging();
                    this._AddressTitle = value;
                    this.SendPropertyChanged("AddressTitle");
                    this.OnAddressTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Storage = "_Address", DbType = "VARCHAR(60) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Storage = "_City", DbType = "VARCHAR(30) NULL", UpdateCheck = UpdateCheck.Never)]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging();
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Region in the schema.
        /// </summary>
        [Column(Storage = "_Region", DbType = "VARCHAR(20) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Region
        {
            get
            {
                return this._Region;
            }
            set
            {
                if (this._Region != value)
                {
                    this.OnRegionChanging(value);
                    this.SendPropertyChanging();
                    this._Region = value;
                    this.SendPropertyChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PostalCode in the schema.
        /// </summary>
        [Column(Storage = "_PostalCode", DbType = "VARCHAR(15) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PostalCode
        {
            get
            {
                return this._PostalCode;
            }
            set
            {
                if (this._PostalCode != value)
                {
                    this.OnPostalCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PostalCode = value;
                    this.SendPropertyChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Column(Storage = "_Country", DbType = "VARCHAR(20) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging();
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Storage = "_Phone", DbType = "VARCHAR(25) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fax in the schema.
        /// </summary>
        [Column(Storage = "_Fax", DbType = "VARCHAR(25) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging();
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Personcontact_PrimaryContact in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Personcontact_Company", Storage="_Personcontact_PrimaryContact", ThisKey="PrimaryContact", OtherKey="ContactID", IsForeignKey=true)]
        public Personcontact Personcontact_PrimaryContact
        {
            get
            {
                return this._Personcontact_PrimaryContact.Entity;
            }
            set
            {
                Personcontact previousValue = this._Personcontact_PrimaryContact.Entity;
                if ((previousValue != value) || (this._Personcontact_PrimaryContact.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Personcontact_PrimaryContact.Entity = null;
                        previousValue.Companies_PrimaryContact.Remove(this);
                    }
                    this._Personcontact_PrimaryContact.Entity = value;
                    if (value != null)
                    {
                        this._PrimaryContact = value.ContactID;
                        value.Companies_PrimaryContact.Add(this);
                    }
                    else
                    {
                        this._PrimaryContact = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Personcontact_PrimaryContact");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Orders_CompanyID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_Order", Storage="_Orders_CompanyID", ThisKey="CompanyID", OtherKey="CompanyID", DeleteRule="RESTRICT")]
        public EntitySet<Order> Orders_CompanyID
        {
            get
            {
                return this._Orders_CompanyID;
            }
            set
            {
                this._Orders_CompanyID.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Orders_ShipCompanyID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_Order1", Storage="_Orders_ShipCompanyID", ThisKey="CompanyID", OtherKey="ShipCompanyID", DeleteRule="RESTRICT")]
        public EntitySet<Order> Orders_ShipCompanyID
        {
            get
            {
                return this._Orders_ShipCompanyID;
            }
            set
            {
                this._Orders_ShipCompanyID.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Personcontacts_CompanyID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_Personcontact", Storage="_Personcontacts_CompanyID", ThisKey="CompanyID", OtherKey="CompanyID", DeleteRule="RESTRICT")]
        public EntitySet<Personcontact> Personcontacts_CompanyID
        {
            get
            {
                return this._Personcontacts_CompanyID;
            }
            set
            {
                this._Personcontacts_CompanyID.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Orders_CompanyID(Order entity)
        {
            this.SendPropertyChanging("Orders_CompanyID");
            entity.Company_CompanyID = this;
        }
    
        private void detach_Orders_CompanyID(Order entity)
        {
            this.SendPropertyChanging("Orders_CompanyID");
            entity.Company_CompanyID = null;
        }

        private void attach_Orders_ShipCompanyID(Order entity)
        {
            this.SendPropertyChanging("Orders_ShipCompanyID");
            entity.Company_ShipCompanyID = this;
        }
    
        private void detach_Orders_ShipCompanyID(Order entity)
        {
            this.SendPropertyChanging("Orders_ShipCompanyID");
            entity.Company_ShipCompanyID = null;
        }

        private void attach_Personcontacts_CompanyID(Personcontact entity)
        {
            this.SendPropertyChanging("Personcontacts_CompanyID");
            entity.Company_CompanyID = this;
        }
    
        private void detach_Personcontacts_CompanyID(Personcontact entity)
        {
            this.SendPropertyChanging("Personcontacts_CompanyID");
            entity.Company_CompanyID = null;
        }
    }

    /// <summary>
    /// Table for the detailed information on what the order consists of
    /// </summary>
    [Table(Name = @"crm.`order details`")]
    public partial class Orderdetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderID;

        private int _ProductID = 0;

        private System.Nullable<decimal> _Price;

        private System.Nullable<decimal> _Quantity;
        #pragma warning restore 0649

        private EntityRef<Order> _Order;

        private EntityRef<Product> _Product;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIDChanging(int value);
        partial void OnOrderIDChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnPriceChanging(System.Nullable<decimal> value);
        partial void OnPriceChanged();
        partial void OnQuantityChanging(System.Nullable<decimal> value);
        partial void OnQuantityChanged();
        #endregion

        public Orderdetail()
        {
            this._Order  = default(EntityRef<Order>);
            this._Product  = default(EntityRef<Product>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderID in the schema.
        /// </summary>
        [Column(Storage = "_OrderID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int OrderID
        {
            get
            {
                return this._OrderID;
            }
            set
            {
                if (this._OrderID != value)
                {
                    if (this._Order.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrderIDChanging(value);
                    this.SendPropertyChanging();
                    this._OrderID = value;
                    this.SendPropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }

    
        /// <summary>
        /// A product present in the order
        /// </summary>
        [Column(Storage = "_ProductID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ProductID
        {
            get
            {
                return this._ProductID;
            }
            set
            {
                if (this._ProductID != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging();
                    this._ProductID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Storage = "_Price", DbType = "DECIMAL(10,2) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// Quantity of the product specified
        /// </summary>
        [Column(Storage = "_Quantity", DbType = "DECIMAL(10,4) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Order in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Order_Orderdetail", Storage="_Order", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
        public Order Order
        {
            get
            {
                return this._Order.Entity;
            }
            set
            {
                Order previousValue = this._Order.Entity;
                if ((previousValue != value) || (this._Order.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Order.Entity = null;
                        previousValue.Orderdetails.Remove(this);
                    }
                    this._Order.Entity = value;
                    if (value != null)
                    {
                        this._OrderID = value.OrderID;
                        value.Orderdetails.Add(this);
                    }
                    else
                    {
                        this._OrderID = default(int);
                    }
                    this.SendPropertyChanged("Order");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Orderdetail", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.Orderdetails.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        this._ProductID = value.ProductID;
                        value.Orderdetails.Add(this);
                    }
                    else
                    {
                        this._ProductID = default(int);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Table storing the general data about orders
    /// </summary>
    [Table(Name = @"crm.orders")]
    public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderID;

        private System.Nullable<int> _CompanyID;

        private System.Nullable<int> _ContactID;

        private System.Nullable<System.DateTime> _OrderDate;

        private System.Nullable<decimal> _Freight;

        private System.Nullable<System.DateTime> _ShipDate;

        private System.Nullable<int> _ShipCompanyID;

        private System.Nullable<decimal> _Discount;
        #pragma warning restore 0649

        private EntitySet<Orderdetail> _Orderdetails;

        private EntityRef<Company> _Company_CompanyID;

        private EntityRef<Personcontact> _Personcontact;

        private EntityRef<Company> _Company_ShipCompanyID;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIDChanging(int value);
        partial void OnOrderIDChanged();
        partial void OnCompanyIDChanging(System.Nullable<int> value);
        partial void OnCompanyIDChanged();
        partial void OnContactIDChanging(System.Nullable<int> value);
        partial void OnContactIDChanged();
        partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
        partial void OnOrderDateChanged();
        partial void OnFreightChanging(System.Nullable<decimal> value);
        partial void OnFreightChanged();
        partial void OnShipDateChanging(System.Nullable<System.DateTime> value);
        partial void OnShipDateChanged();
        partial void OnShipCompanyIDChanging(System.Nullable<int> value);
        partial void OnShipCompanyIDChanged();
        partial void OnDiscountChanging(System.Nullable<decimal> value);
        partial void OnDiscountChanged();
        #endregion

        public Order()
        {
            this._Orderdetails = new EntitySet<Orderdetail>(new Action<Orderdetail>(this.attach_Orderdetails), new Action<Orderdetail>(this.detach_Orderdetails));
            this._Company_CompanyID  = default(EntityRef<Company>);
            this._Personcontact  = default(EntityRef<Personcontact>);
            this._Company_ShipCompanyID  = default(EntityRef<Company>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderID in the schema.
        /// </summary>
        [Column(Storage = "_OrderID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int OrderID
        {
            get
            {
                return this._OrderID;
            }
            set
            {
                if (this._OrderID != value)
                {
                    this.OnOrderIDChanging(value);
                    this.SendPropertyChanging();
                    this._OrderID = value;
                    this.SendPropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }

    
        /// <summary>
        /// The customer company
        /// </summary>
        [Column(Storage = "_CompanyID", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CompanyID
        {
            get
            {
                return this._CompanyID;
            }
            set
            {
                if (this._CompanyID != value)
                {
                    if (this._Company_CompanyID.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyID = value;
                    this.SendPropertyChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }

    
        /// <summary>
        /// The person to contact regarding the order
        /// </summary>
        [Column(Storage = "_ContactID", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ContactID
        {
            get
            {
                return this._ContactID;
            }
            set
            {
                if (this._ContactID != value)
                {
                    if (this._Personcontact.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContactIDChanging(value);
                    this.SendPropertyChanging();
                    this._ContactID = value;
                    this.SendPropertyChanged("ContactID");
                    this.OnContactIDChanged();
                }
            }
        }

    
        /// <summary>
        /// The date when the order was made
        /// </summary>
        [Column(Storage = "_OrderDate", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> OrderDate
        {
            get
            {
                return this._OrderDate;
            }
            set
            {
                if (this._OrderDate != value)
                {
                    this.OnOrderDateChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDate = value;
                    this.SendPropertyChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }

    
        /// <summary>
        /// Freight cost of the order
        /// </summary>
        [Column(Storage = "_Freight", DbType = "DECIMAL(10,2) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Freight
        {
            get
            {
                return this._Freight;
            }
            set
            {
                if (this._Freight != value)
                {
                    this.OnFreightChanging(value);
                    this.SendPropertyChanging();
                    this._Freight = value;
                    this.SendPropertyChanged("Freight");
                    this.OnFreightChanged();
                }
            }
        }

    
        /// <summary>
        /// The date of order to be shipped
        /// </summary>
        [Column(Storage = "_ShipDate", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ShipDate
        {
            get
            {
                return this._ShipDate;
            }
            set
            {
                if (this._ShipDate != value)
                {
                    this.OnShipDateChanging(value);
                    this.SendPropertyChanging();
                    this._ShipDate = value;
                    this.SendPropertyChanged("ShipDate");
                    this.OnShipDateChanged();
                }
            }
        }

    
        /// <summary>
        /// The shipping contractor
        /// </summary>
        [Column(Storage = "_ShipCompanyID", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ShipCompanyID
        {
            get
            {
                return this._ShipCompanyID;
            }
            set
            {
                if (this._ShipCompanyID != value)
                {
                    if (this._Company_ShipCompanyID.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnShipCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._ShipCompanyID = value;
                    this.SendPropertyChanged("ShipCompanyID");
                    this.OnShipCompanyIDChanged();
                }
            }
        }

    
        /// <summary>
        /// Discount available for the order
        /// </summary>
        [Column(Storage = "_Discount", DbType = "DECIMAL(10,2) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Discount
        {
            get
            {
                return this._Discount;
            }
            set
            {
                if (this._Discount != value)
                {
                    this.OnDiscountChanging(value);
                    this.SendPropertyChanging();
                    this._Discount = value;
                    this.SendPropertyChanged("Discount");
                    this.OnDiscountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Orderdetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Order_Orderdetail", Storage="_Orderdetails", ThisKey="OrderID", OtherKey="OrderID", DeleteRule="RESTRICT")]
        public EntitySet<Orderdetail> Orderdetails
        {
            get
            {
                return this._Orderdetails;
            }
            set
            {
                this._Orderdetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Company_CompanyID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_Order", Storage="_Company_CompanyID", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
        public Company Company_CompanyID
        {
            get
            {
                return this._Company_CompanyID.Entity;
            }
            set
            {
                Company previousValue = this._Company_CompanyID.Entity;
                if ((previousValue != value) || (this._Company_CompanyID.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Company_CompanyID.Entity = null;
                        previousValue.Orders_CompanyID.Remove(this);
                    }
                    this._Company_CompanyID.Entity = value;
                    if (value != null)
                    {
                        this._CompanyID = value.CompanyID;
                        value.Orders_CompanyID.Add(this);
                    }
                    else
                    {
                        this._CompanyID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_CompanyID");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Personcontact in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Personcontact_Order", Storage="_Personcontact", ThisKey="ContactID", OtherKey="ContactID", IsForeignKey=true)]
        public Personcontact Personcontact
        {
            get
            {
                return this._Personcontact.Entity;
            }
            set
            {
                Personcontact previousValue = this._Personcontact.Entity;
                if ((previousValue != value) || (this._Personcontact.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Personcontact.Entity = null;
                        previousValue.Orders.Remove(this);
                    }
                    this._Personcontact.Entity = value;
                    if (value != null)
                    {
                        this._ContactID = value.ContactID;
                        value.Orders.Add(this);
                    }
                    else
                    {
                        this._ContactID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Personcontact");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_ShipCompanyID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_Order1", Storage="_Company_ShipCompanyID", ThisKey="ShipCompanyID", OtherKey="CompanyID", IsForeignKey=true)]
        public Company Company_ShipCompanyID
        {
            get
            {
                return this._Company_ShipCompanyID.Entity;
            }
            set
            {
                Company previousValue = this._Company_ShipCompanyID.Entity;
                if ((previousValue != value) || (this._Company_ShipCompanyID.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Company_ShipCompanyID.Entity = null;
                        previousValue.Orders_ShipCompanyID.Remove(this);
                    }
                    this._Company_ShipCompanyID.Entity = value;
                    if (value != null)
                    {
                        this._ShipCompanyID = value.CompanyID;
                        value.Orders_ShipCompanyID.Add(this);
                    }
                    else
                    {
                        this._ShipCompanyID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_ShipCompanyID");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Orderdetails(Orderdetail entity)
        {
            this.SendPropertyChanging("Orderdetails");
            entity.Order = this;
        }
    
        private void detach_Orderdetails(Orderdetail entity)
        {
            this.SendPropertyChanging("Orderdetails");
            entity.Order = null;
        }
    }

    /// <summary>
    /// The table for information on persons related to the store activities
    /// </summary>
    [Table(Name = @"crm.`person contact`")]
    public partial class Personcontact : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ContactID;

        private string _Title;

        private string _FirstName;

        private string _MiddleName;

        private string _LastName;

        private System.Nullable<int> _CompanyID;

        private string _HomePhone;

        private string _MobilePhone;

        private string _AddressTitle;

        private string _Address;

        private string _City;

        private string _Region;

        private string _PostalCode;

        private string _Country;

        private string _Phone;

        private string _Fax;
        #pragma warning restore 0649

        private EntitySet<Company> _Companies_PrimaryContact;

        private EntitySet<Order> _Orders;

        private EntityRef<Company> _Company_CompanyID;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnContactIDChanging(int value);
        partial void OnContactIDChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnMiddleNameChanging(string value);
        partial void OnMiddleNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnCompanyIDChanging(System.Nullable<int> value);
        partial void OnCompanyIDChanged();
        partial void OnHomePhoneChanging(string value);
        partial void OnHomePhoneChanged();
        partial void OnMobilePhoneChanging(string value);
        partial void OnMobilePhoneChanged();
        partial void OnAddressTitleChanging(string value);
        partial void OnAddressTitleChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        #endregion

        public Personcontact()
        {
            this._Companies_PrimaryContact = new EntitySet<Company>(new Action<Company>(this.attach_Companies_PrimaryContact), new Action<Company>(this.detach_Companies_PrimaryContact));
            this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
            this._Company_CompanyID  = default(EntityRef<Company>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ContactID in the schema.
        /// </summary>
        [Column(Storage = "_ContactID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ContactID
        {
            get
            {
                return this._ContactID;
            }
            set
            {
                if (this._ContactID != value)
                {
                    this.OnContactIDChanging(value);
                    this.SendPropertyChanging();
                    this._ContactID = value;
                    this.SendPropertyChanged("ContactID");
                    this.OnContactIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Storage = "_Title", DbType = "VARCHAR(8) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FirstName in the schema.
        /// </summary>
        [Column(Storage = "_FirstName", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if (this._FirstName != value)
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MiddleName in the schema.
        /// </summary>
        [Column(Storage = "_MiddleName", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MiddleName
        {
            get
            {
                return this._MiddleName;
            }
            set
            {
                if (this._MiddleName != value)
                {
                    this.OnMiddleNameChanging(value);
                    this.SendPropertyChanging();
                    this._MiddleName = value;
                    this.SendPropertyChanged("MiddleName");
                    this.OnMiddleNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastName in the schema.
        /// </summary>
        [Column(Storage = "_LastName", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if (this._LastName != value)
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging();
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Reference to the company where the person is employed
        /// </summary>
        [Column(Storage = "_CompanyID", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CompanyID
        {
            get
            {
                return this._CompanyID;
            }
            set
            {
                if (this._CompanyID != value)
                {
                    if (this._Company_CompanyID.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyID = value;
                    this.SendPropertyChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HomePhone in the schema.
        /// </summary>
        [Column(Storage = "_HomePhone", DbType = "VARCHAR(25) NULL", UpdateCheck = UpdateCheck.Never)]
        public string HomePhone
        {
            get
            {
                return this._HomePhone;
            }
            set
            {
                if (this._HomePhone != value)
                {
                    this.OnHomePhoneChanging(value);
                    this.SendPropertyChanging();
                    this._HomePhone = value;
                    this.SendPropertyChanged("HomePhone");
                    this.OnHomePhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MobilePhone in the schema.
        /// </summary>
        [Column(Storage = "_MobilePhone", DbType = "VARCHAR(25) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MobilePhone
        {
            get
            {
                return this._MobilePhone;
            }
            set
            {
                if (this._MobilePhone != value)
                {
                    this.OnMobilePhoneChanging(value);
                    this.SendPropertyChanging();
                    this._MobilePhone = value;
                    this.SendPropertyChanged("MobilePhone");
                    this.OnMobilePhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// Specifies the address type which may be Home or Work
        /// </summary>
        [Column(Storage = "_AddressTitle", DbType = "VARCHAR(120) NULL", UpdateCheck = UpdateCheck.Never)]
        public string AddressTitle
        {
            get
            {
                return this._AddressTitle;
            }
            set
            {
                if (this._AddressTitle != value)
                {
                    this.OnAddressTitleChanging(value);
                    this.SendPropertyChanging();
                    this._AddressTitle = value;
                    this.SendPropertyChanged("AddressTitle");
                    this.OnAddressTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Storage = "_Address", DbType = "VARCHAR(60) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Storage = "_City", DbType = "VARCHAR(30) NULL", UpdateCheck = UpdateCheck.Never)]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging();
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Region in the schema.
        /// </summary>
        [Column(Storage = "_Region", DbType = "VARCHAR(20) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Region
        {
            get
            {
                return this._Region;
            }
            set
            {
                if (this._Region != value)
                {
                    this.OnRegionChanging(value);
                    this.SendPropertyChanging();
                    this._Region = value;
                    this.SendPropertyChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PostalCode in the schema.
        /// </summary>
        [Column(Storage = "_PostalCode", DbType = "VARCHAR(15) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PostalCode
        {
            get
            {
                return this._PostalCode;
            }
            set
            {
                if (this._PostalCode != value)
                {
                    this.OnPostalCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PostalCode = value;
                    this.SendPropertyChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Column(Storage = "_Country", DbType = "VARCHAR(20) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging();
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// Working phone
        /// </summary>
        [Column(Storage = "_Phone", DbType = "VARCHAR(25) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// Working fax
        /// </summary>
        [Column(Storage = "_Fax", DbType = "VARCHAR(25) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging();
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Companies_PrimaryContact in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Personcontact_Company", Storage="_Companies_PrimaryContact", ThisKey="ContactID", OtherKey="PrimaryContact", DeleteRule="RESTRICT")]
        public EntitySet<Company> Companies_PrimaryContact
        {
            get
            {
                return this._Companies_PrimaryContact;
            }
            set
            {
                this._Companies_PrimaryContact.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Orders in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Personcontact_Order", Storage="_Orders", ThisKey="ContactID", OtherKey="ContactID", DeleteRule="RESTRICT")]
        public EntitySet<Order> Orders
        {
            get
            {
                return this._Orders;
            }
            set
            {
                this._Orders.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Company_CompanyID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_Personcontact", Storage="_Company_CompanyID", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
        public Company Company_CompanyID
        {
            get
            {
                return this._Company_CompanyID.Entity;
            }
            set
            {
                Company previousValue = this._Company_CompanyID.Entity;
                if ((previousValue != value) || (this._Company_CompanyID.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Company_CompanyID.Entity = null;
                        previousValue.Personcontacts_CompanyID.Remove(this);
                    }
                    this._Company_CompanyID.Entity = value;
                    if (value != null)
                    {
                        this._CompanyID = value.CompanyID;
                        value.Personcontacts_CompanyID.Add(this);
                    }
                    else
                    {
                        this._CompanyID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_CompanyID");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Companies_PrimaryContact(Company entity)
        {
            this.SendPropertyChanging("Companies_PrimaryContact");
            entity.Personcontact_PrimaryContact = this;
        }
    
        private void detach_Companies_PrimaryContact(Company entity)
        {
            this.SendPropertyChanging("Companies_PrimaryContact");
            entity.Personcontact_PrimaryContact = null;
        }

        private void attach_Orders(Order entity)
        {
            this.SendPropertyChanging("Orders");
            entity.Personcontact = this;
        }
    
        private void detach_Orders(Order entity)
        {
            this.SendPropertyChanging("Orders");
            entity.Personcontact = null;
        }
    }

    /// <summary>
    /// The tree of product categories
    /// </summary>
    [Table(Name = @"crm.`product categories`")]
    public partial class Productcategory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CategoryID;

        private string _CategoryName;

        private System.Nullable<int> _ParentCategory;
        #pragma warning restore 0649

        private EntitySet<Productcategory> _Productcategories_ParentCategory;

        private EntityRef<Productcategory> _Productcategory_ParentCategory;

        private EntitySet<Product> _Products;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnParentCategoryChanging(System.Nullable<int> value);
        partial void OnParentCategoryChanged();
        #endregion

        public Productcategory()
        {
            this._Productcategories_ParentCategory = new EntitySet<Productcategory>(new Action<Productcategory>(this.attach_Productcategories_ParentCategory), new Action<Productcategory>(this.detach_Productcategories_ParentCategory));
            this._Productcategory_ParentCategory  = default(EntityRef<Productcategory>);
            this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryID in the schema.
        /// </summary>
        [Column(Storage = "_CategoryID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if (this._CategoryID != value)
                {
                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [Column(Storage = "_CategoryName", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CategoryName
        {
            get
            {
                return this._CategoryName;
            }
            set
            {
                if (this._CategoryName != value)
                {
                    this.OnCategoryNameChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryName = value;
                    this.SendPropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// A reference to the major category which includes this one
        /// </summary>
        [Column(Storage = "_ParentCategory", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ParentCategory
        {
            get
            {
                return this._ParentCategory;
            }
            set
            {
                if (this._ParentCategory != value)
                {
                    if (this._Productcategory_ParentCategory.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentCategoryChanging(value);
                    this.SendPropertyChanging();
                    this._ParentCategory = value;
                    this.SendPropertyChanged("ParentCategory");
                    this.OnParentCategoryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Productcategories_ParentCategory in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Productcategory_Productcategory", Storage="_Productcategories_ParentCategory", ThisKey="CategoryID", OtherKey="ParentCategory", DeleteRule="RESTRICT")]
        public EntitySet<Productcategory> Productcategories_ParentCategory
        {
            get
            {
                return this._Productcategories_ParentCategory;
            }
            set
            {
                this._Productcategories_ParentCategory.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Productcategory_ParentCategory in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Productcategory_Productcategory", Storage="_Productcategory_ParentCategory", ThisKey="ParentCategory", OtherKey="CategoryID", IsForeignKey=true)]
        public Productcategory Productcategory_ParentCategory
        {
            get
            {
                return this._Productcategory_ParentCategory.Entity;
            }
            set
            {
                Productcategory previousValue = this._Productcategory_ParentCategory.Entity;
                if ((previousValue != value) || (this._Productcategory_ParentCategory.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Productcategory_ParentCategory.Entity = null;
                        previousValue.Productcategories_ParentCategory.Remove(this);
                    }
                    this._Productcategory_ParentCategory.Entity = value;
                    if (value != null)
                    {
                        this._ParentCategory = value.CategoryID;
                        value.Productcategories_ParentCategory.Add(this);
                    }
                    else
                    {
                        this._ParentCategory = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Productcategory_ParentCategory");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Productcategory_Product", Storage="_Products", ThisKey="CategoryID", OtherKey="CategoryID", DeleteRule="RESTRICT")]
        public EntitySet<Product> Products
        {
            get
            {
                return this._Products;
            }
            set
            {
                this._Products.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Productcategories_ParentCategory(Productcategory entity)
        {
            this.SendPropertyChanging("Productcategories_ParentCategory");
            entity.Productcategory_ParentCategory = this;
        }
    
        private void detach_Productcategories_ParentCategory(Productcategory entity)
        {
            this.SendPropertyChanging("Productcategories_ParentCategory");
            entity.Productcategory_ParentCategory = null;
        }

        private void attach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Productcategory = this;
        }
    
        private void detach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Productcategory = null;
        }
    }

    /// <summary>
    /// Table containing data about products
    /// </summary>
    [Table(Name = @"crm.products")]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductID;

        private string _ProductName;

        private System.Nullable<int> _CategoryID;

        private string _UnitName;

        private System.Nullable<short> _UnitScale;

        private System.Nullable<int> _InStock;

        private System.Nullable<decimal> _Price;

        private System.Nullable<decimal> _DiscontinuedPrice;

        private System.Nullable<bool> _Discontinued = false;
        #pragma warning restore 0649

        private EntitySet<Orderdetail> _Orderdetails;

        private EntityRef<Productcategory> _Productcategory;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnCategoryIDChanging(System.Nullable<int> value);
        partial void OnCategoryIDChanged();
        partial void OnUnitNameChanging(string value);
        partial void OnUnitNameChanged();
        partial void OnUnitScaleChanging(System.Nullable<short> value);
        partial void OnUnitScaleChanged();
        partial void OnInStockChanging(System.Nullable<int> value);
        partial void OnInStockChanged();
        partial void OnPriceChanging(System.Nullable<decimal> value);
        partial void OnPriceChanged();
        partial void OnDiscontinuedPriceChanging(System.Nullable<decimal> value);
        partial void OnDiscontinuedPriceChanged();
        partial void OnDiscontinuedChanging(System.Nullable<bool> value);
        partial void OnDiscontinuedChanged();
        #endregion

        public Product()
        {
            this._Orderdetails = new EntitySet<Orderdetail>(new Action<Orderdetail>(this.attach_Orderdetails), new Action<Orderdetail>(this.detach_Orderdetails));
            this._Productcategory  = default(EntityRef<Productcategory>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductID in the schema.
        /// </summary>
        [Column(Storage = "_ProductID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ProductID
        {
            get
            {
                return this._ProductID;
            }
            set
            {
                if (this._ProductID != value)
                {
                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging();
                    this._ProductID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Storage = "_ProductName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging();
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// A category to which the product belongs
        /// </summary>
        [Column(Storage = "_CategoryID", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if (this._CategoryID != value)
                {
                    if (this._Productcategory.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }

    
        /// <summary>
        /// Specifies whether a single product unit consists of one (Unit) or several (Parcel) items
        /// </summary>
        [Column(Storage = "_UnitName", DbType = "VARCHAR(20) NULL", UpdateCheck = UpdateCheck.Never)]
        public string UnitName
        {
            get
            {
                return this._UnitName;
            }
            set
            {
                if (this._UnitName != value)
                {
                    this.OnUnitNameChanging(value);
                    this.SendPropertyChanging();
                    this._UnitName = value;
                    this.SendPropertyChanged("UnitName");
                    this.OnUnitNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Specifies the number of items in a parcel
        /// </summary>
        [Column(Storage = "_UnitScale", DbType = "SMALLINT(6) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<short> UnitScale
        {
            get
            {
                return this._UnitScale;
            }
            set
            {
                if (this._UnitScale != value)
                {
                    this.OnUnitScaleChanging(value);
                    this.SendPropertyChanging();
                    this._UnitScale = value;
                    this.SendPropertyChanged("UnitScale");
                    this.OnUnitScaleChanged();
                }
            }
        }

    
        /// <summary>
        /// Product quantity available in the stock
        /// </summary>
        [Column(Storage = "_InStock", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> InStock
        {
            get
            {
                return this._InStock;
            }
            set
            {
                if (this._InStock != value)
                {
                    this.OnInStockChanging(value);
                    this.SendPropertyChanging();
                    this._InStock = value;
                    this.SendPropertyChanged("InStock");
                    this.OnInStockChanged();
                }
            }
        }

    
        /// <summary>
        /// Regular price of the product
        /// </summary>
        [Column(Storage = "_Price", DbType = "DECIMAL(10,2) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// Actual price of discontinued products
        /// </summary>
        [Column(Storage = "_DiscontinuedPrice", DbType = "DECIMAL(10,2) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> DiscontinuedPrice
        {
            get
            {
                return this._DiscontinuedPrice;
            }
            set
            {
                if (this._DiscontinuedPrice != value)
                {
                    this.OnDiscontinuedPriceChanging(value);
                    this.SendPropertyChanging();
                    this._DiscontinuedPrice = value;
                    this.SendPropertyChanged("DiscontinuedPrice");
                    this.OnDiscontinuedPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// Specifies whether the product is being sold off
        /// </summary>
        [Column(Storage = "_Discontinued", DbType = "BIT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Discontinued
        {
            get
            {
                return this._Discontinued;
            }
            set
            {
                if (this._Discontinued != value)
                {
                    this.OnDiscontinuedChanging(value);
                    this.SendPropertyChanging();
                    this._Discontinued = value;
                    this.SendPropertyChanged("Discontinued");
                    this.OnDiscontinuedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Orderdetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Orderdetail", Storage="_Orderdetails", ThisKey="ProductID", OtherKey="ProductID", DeleteRule="RESTRICT")]
        public EntitySet<Orderdetail> Orderdetails
        {
            get
            {
                return this._Orderdetails;
            }
            set
            {
                this._Orderdetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Productcategory in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Productcategory_Product", Storage="_Productcategory", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
        public Productcategory Productcategory
        {
            get
            {
                return this._Productcategory.Entity;
            }
            set
            {
                Productcategory previousValue = this._Productcategory.Entity;
                if ((previousValue != value) || (this._Productcategory.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Productcategory.Entity = null;
                        previousValue.Products.Remove(this);
                    }
                    this._Productcategory.Entity = value;
                    if (value != null)
                    {
                        this._CategoryID = value.CategoryID;
                        value.Products.Add(this);
                    }
                    else
                    {
                        this._CategoryID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Productcategory");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Orderdetails(Orderdetail entity)
        {
            this.SendPropertyChanging("Orderdetails");
            entity.Product = this;
        }
    
        private void detach_Orderdetails(Orderdetail entity)
        {
            this.SendPropertyChanging("Orderdetails");
            entity.Product = null;
        }
    }

}
